




* TODO COOL THINGS TO INCLUDE INTO OUR EMACS CONFIGURATION IN THE FUTURE
	- PLUGINS ---> AVY, DEVDOCS, MULTIPLE CURSORS, YASSSS
#+begin_src emacs-lisp

	;; MAGNAR DEFAULT BLACK THEME (https://github.com/magnars/emacsd-reboot/blob/main/default-black-theme.el)

	;; [[ MULTIPLE CURSORS ---> TSODING CONFIG... TAKE INSPIRATION FROM KEYBINDINGS ]]
	;; 	(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
	;; 	(global-set-key (kbd "C->")         'mc/mark-next-like-this)
	;; 	(global-set-key (kbd "C-<")         'mc/mark-previous-like-this)
	;; 	(global-set-key (kbd "C-c C-<")     'mc/mark-all-like-this)
	;; 	(global-set-key (kbd "C-\"")        'mc/skip-to-next-like-this)
	;; 	(global-set-key (kbd "C-:")         'mc/skip-to-previous-like-this)

	;; [[ DIRED ---> TSODING CONFIG... TAKE INSPIRATION ]]
	;; 	(require 'dired-x)
	;; 	(setq dired-omit-files
	;; 		(concat dired-omit-files "\\|^\\..+$"))
	;; 	(setq-default dired-dwim-target t)
	;; 	(setq dired-listing-switches "-alh")

	;; [[ OMIT UNINTERESTING FILES FROM DIRED ]]
	;; 	(require 'dired-x)
	;; 	(setq-default dired-omit-files-p t)
	;; 	(setq dired-omit-files
	;; 		(concat dired-omit-files "\\|^\\..+$"))

	;; [[ WORD-WRAP... ADAPT FOR ORG-MODE  ]]
	;; 	(defun rc/enable-word-wrap ()
	;; 		(interactive)
	;; 		(toggle-word-wrap 1))
	;; 	(add-hook 'markdown-mode-hook 'rc/enable-word-wrap)

#+end_src





#+begin_src emacs-lisp
	;; -*- lexical-binding: t; -*-
#+end_src


#+begin_src emacs-lisp
	(require 'package)
	(setq package-archives '(
				("melpa"  . "https://melpa.org/packages/"    )
				("elpa"   . "https://elpa.gnu.org/packages/" )
				("nongnu" . "https://elpa.nongnu.org/nongnu/")
				)
	)

	(unless
		(bound-and-true-p package--initialized)
			(setq package-enable-at-startup nil)
			(package-initialize)
	)

	(unless (package-installed-p 'use-package) (package-refresh-contents) (package-install 'use-package))
	(eval-when-compile (require 'use-package))
#+end_src


* EMACS GENERAL SETTINGS - SANE DEFAULTS
	- :custom in use-package
		- essentially a shorthand for calling setq for each variable but ensures that the customizations are applied after the package is loaded
#+begin_src emacs-lisp

	(setq backup-directory-alist `(("." . ,(expand-file-name "~/.emacs-backups" user-emacs-directory))))  ;; set the directory for backup files
	(setq auto-save-default nil auto-save-list-file-prefix nil)  ;; disable auto-saving, ensuring that emacs does not create the auto-save directory
	(setq backup-by-copying t)  ;; create backups by copying files, which avoids issues with hard links
	(setq version-control   t)  ;; use version numbers for backups

	;; create the backup directory if it does not exist
	(unless (file-exists-p  "~/.emacs-backups"  )
		(make-directory "~/.emacs-backups" t)
	)


	(setq display-line-numbers-type 'relative)  ;; enabling line numbers (relative)
	(global-display-line-numbers-mode 1)        ;; enabling line numbers
	(electric-pair-mode               1)        ;; enabling automatic parens pairing

	(menu-bar-mode -1)                          ;; disable menu bar
	(tool-bar-mode -1)                          ;; disable tool bar

	(setq-default truncate-lines   t)           ;; enabling truncated lines
	(setq mac-command-key-is-meta  t)
	(setq mac-command-modifier 'meta)

	(global-hl-line-mode 1)

	(setq enable-recursive-minibuffers t)  ;; support opening minibuffers inside existing minibuffers
	(setq delete-by-moving-to-trash    t)  ;; extra layer of precaution against deleting wanted files
	(setq org-src-preserve-indentation t)  ;; org disable automatic indentation in source code blocks
		
	(setq read-extended-command-predicate #'command-completion-default-include-p)  ;; Hide commands in M-x which do not work in the current mode
	(setq undo-limit 10000000)  ;; emacs remembers up to 10000000 undo actions for each BUFFER
	(setq tab-always-indent 'complete)  ;; support indentation + completion using TAB key. `completion-at-point' normally bound to M-TAB

	(add-hook 'window-setup-hook 'toggle-frame-fullscreen t)
	(setq inhibit-splash-screen t)


	(defun onncera-post-loading ()
		(blink-cursor-mode -1) (fringe-mode -1) (scroll-bar-mode -1) (global-hl-line-mode 1) (set-face-underline 'hl-line nil) (split-window-horizontally)
		(set-background-color "#161616") (set-foreground-color "burlywood3") (set-cursor-color "#40FF40") (set-face-background hl-line-face "midnight blue")
	)
	(add-hook 'window-setup-hook 'onncera-post-loading t)
	(add-hook 'after-init-hook (lambda ()
					(load-theme 'modus-vivendi-tritanopia t)
				   )
	)

#+end_src


* COMPLETION FRAMEWORKS FOR EMACS (MINIBUFFER - CONSULT, EMBARK, MARGINALIA, ORDERLESS, VERTICO)
	- enhances the emacs search and completion experience, and also provides a united interface for project search and replace, powered by ripgrep.
	- enabled by several modular packages focused on enhancing the built-in `completing-read' interface.
#+begin_src emacs-lisp

;; completion style that divides the pattern into space-separated
;; components, &  matches candidates that match all of the components in any order (provides better filtering methods)
(use-package orderless
	:ensure t
	:init
	(setq completion-styles '(orderless basic)  ;; `basic' completion style is specified as fallback in addition to `orderless'
	      completion-category-defaults nil      ;; serves as a default value for `completion-category-overrides'
	      completion-category-overrides '((file (styles basic partial-completion)))  ;; `partial-completion' style lets you use wildcards for file completion & partial paths, e.g., /u/s/l for /usr/share/local
	)
)


(use-package embark-consult :ensure t :hook (embark-collect-mode . consult-preview-at-point-mode))  ;; `embark-consult' package is glue code to tie together `embark' and `consult'.
;; makes it easy to choose a command to run based on what is near point, both during a
;; minibuffer completion session and in normal buffers
(use-package embark
	:ensure t
	:bind
		(
		("C-." . embark-act )  ;; essentially acts as a keyboard-based version of a right-click contextual menu
		("C-;" . embark-dwim)  ;; alternative == `M-.'
		)
	:init (setq prefix-help-command #'embark-prefix-help-command)
)


;; provides search and navigation commands based on the emacs completion function
(use-package consult
	:ensure t
	:bind (
	("C-x b"   . consult-buffer     )  ;; orig. switch-to-buffer
	("M-g g"   . consult-goto-line  )  ;; orig. goto-line
	("M-g M-g" . consult-goto-line  )  ;; orig. goto-line
	("M-g o"   . consult-outline    )  ;; alternative: consult-org-heading
	("M-g m"   . consult-mark       )
	("M-g k"   . consult-global-mark)
	("M-g i"   . consult-imenu      )
	("M-g I"   . consult-imenu-multi)
	("M-s d"   . consult-find       )  ;; alternative: consult-fd
	("M-s c"   . consult-locate     )
	("M-s g"   . consult-grep       )
	("M-s r"   . consult-ripgrep    )
	("M-s l"   . consult-line       )

	:map isearch-mode-map
	("M-s l"   . consult-line       )  ;; needed by consult-line to detect isearch
	("M-s L"   . consult-line-multi )  ;; needed by consult-line to detect isearch

	)

	;; automatic live preview at point in the *Completions* BUFFER... especially good when you use default completion UI
	:hook (completion-list-mode . consult-preview-at-point-mode)

	:init
	(setq register-preview-delay 0)
	(setq register-preview-function #'consult-register-format)

	:config
	(setq consult-narrow-key "<") ;; configure the narrowing key... both "<" and "C-+" work reasonably well
)


;; annotations or marks placed at the margin of the page of a book or in this case helpful colorful
;; annotations placed at the margin of the minibuffer for your completion candidates
(use-package marginalia
	:ensure t
	:bind   (:map minibuffer-local-map ("M-A" . marginalia-cycle))  ;; allows you to cycle through different annotation styles provided
	:custom (marginalia-align 'right)
	:init
	;; marginalia must be activated in the :init section of use-package such that the
	;; mode gets enabled right away. Note that this forces loading the package
	(marginalia-mode 1)
)


;; provides a performant and minimalistic vertical completion
(use-package vertico
	:ensure t
	:init
		(setq vertico-cycle t)
		(vertico-mode 1)
)


;; allows you to edit a grep buffer and apply those changes to the file buffer like sed interactively
;; allows you to edit the results of a grep search while inside a `grep-mode' buffer
;; all we nned is to toggle the editable mode, make the changes, and then type C-c C-c to confirm or C-c C-k to abort.
;;
;; Further reading: https://protesilaos.com/emacs/dotemacs#h:9a3581df-ab18-4266-815e-2edd7f7e4852
(use-package wgrep
	:ensure t
	:bind (
		:map grep-mode-map
		("e"       . wgrep-change-to-wgrep-mode)
		("C-x C-q" . wgrep-change-to-wgrep-mode)
		("C-c C-c" . wgrep-finish-edit)
	      )
)

#+end_src







